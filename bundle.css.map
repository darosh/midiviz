{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\Note.svelte",
    "..\\src\\Control.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport { initMidi, NOTE_OFF, NOTE_ON } from './midi'\nimport Notes from './Notes.svelte'\nimport Controls from './Controls.svelte'\nimport { eventId } from './events'\nimport { palette } from './config'\n\nlet width\nlet current\nlet last = 0\nlet order = 0\n\nlet messages = []\nconst notesMap = {}\nconst controlsMap = {}\n\ninitMidi(inputHandler)\n\nfunction inputHandler (event) {\n  const id = eventId(event)\n\n  messages.unshift({\n    event,\n    id,\n  })\n\n  messages = messages\n\n  const number = event.controller ? event.controller.number : event.note ? event.note.number : -1\n  const value = event.value !== undefined ? event.value : event.rawVelocity !== undefined ? event.rawVelocity : 64\n\n  if (event.type === NOTE_OFF) {\n    if (notesMap[id]) {\n      notesMap[id].deleted = true\n    }\n\n    setTimeout(() => {\n      if (notesMap[id] && notesMap[id].deleted) {\n        delete notesMap[id]\n        ++last\n      }\n    }, 1200)\n\n    return\n  }\n\n  ++order\n\n  if (event.type === NOTE_ON) {\n    notesMap[id] = { event, number, value, deleted: false, order, id }\n\n    return\n  }\n\n  controlsMap[id] = { event, number, value, deleted: false, order, id, active: true }\n\n  setTimeout(() => {\n    if (controlsMap[id].event === event) {\n      controlsMap[id].active = false\n      ++last\n    }\n  }, 1200)\n\n  setTimeout(() => {\n    if (controlsMap[id].event === event) {\n      delete controlsMap[id]\n      ++last\n    }\n  }, 9600)\n}\n\nfunction hex (n) {\n  return `${n < 16 ? '0' : ''}${n.toString(16)}`\n}\n\nfunction dat (m) {\n  return Array.from(m.event.data).map(hex).join(' ')\n}\n\n</script>\n<style>\n:global(html, body) {\n  color: #fff;\n  background-color: #000;\n  margin: 0;\n  padding: 0;\n}\n\n.x-messages {\n  position: absolute;\n  height: 100vh;\n  width: 64px;\n  right: 0;\n  top: 0;\n  background-color: #666666;\n  overflow: hidden;\n  display: none;\n}\n\n.notes {\n  position: absolute;\n  top: calc(50vh - 168px);\n}\n\n.controls {\n  position: absolute;\n  bottom: 0;\n}\n</style>\n<svelte:window bind:innerWidth={width}/>\n<div class=\"notes\">\n  <Notes {width} {last} map={notesMap} {palette}/>\n</div>\n<div class=\"controls\">\n  <Controls map={controlsMap} {width} {palette} {last}/>\n</div>\n<div class=\"x-messages\">\n    {#each messages.slice(0, 10) as m, index (index)}\n      <div>{dat(m)}</div>\n    {/each}\n</div>\n",
    "<script>\r\nimport { spring } from 'svelte/motion'\r\n\r\nexport let id\r\nexport let x\r\nexport let y\r\nexport let size = 0\r\nexport let color\r\nexport let deleted\r\nexport let low\r\n\r\nlet springX = spring(\r\n  x,\r\n  {\r\n    stiffness: 0.06,\r\n    damping: 0.5,\r\n    precision: 1\r\n  }\r\n)\r\n\r\nlet springY = spring(\r\n  y,\r\n  {\r\n    stiffness: 0.1,\r\n    // damping: 0.333,\r\n    damping: 0.25,\r\n    precision: 0.1\r\n  }\r\n)\r\n\r\nlet sizeSpring = spring(\r\n  size,\r\n  {\r\n    stiffness: 0.025,\r\n    damping: 1,\r\n    precision: 1\r\n  }\r\n)\r\n\r\n$: springX.set(x)\r\n$: springY.set(y + deleted ? low : 0)\r\n$: sizeSpring.set(size)\r\n\r\n$: if (deleted) {\r\n  // color = '#000'\r\n  sizeSpring.set(0)\r\n}\r\n</script>\r\n\r\n<g fill={color} transform=\"translate({[$springX, $springY]})\" data-id={id}>\r\n  <circle r={Math.max(0, $sizeSpring)}/>\r\n</g>\r\n\r\n<style>\r\ng {\r\n  transition: fill 200ms linear;\r\n  will-change: transform, color;\r\n}\r\n</style>\r\n",
    "<script>\r\nimport { spring } from 'svelte/motion'\r\nimport { arc } from 'd3-shape'\r\n\r\nexport let id\r\nexport let x\r\nexport let y\r\nexport let size\r\nexport let value\r\nexport let color\r\nexport let active\r\nexport let deleted\r\n\r\nimport { tweened } from 'svelte/motion'\r\nimport { linear } from 'svelte/easing'\r\n\r\nconst progress = tweened(value, {\r\n  duration: 100,\r\n  easing: linear\r\n})\r\n\r\nconst outer = tweened(48, {\r\n  duration: 200,\r\n  easing: linear\r\n})\r\n\r\nlet arcGenerator = arc()\r\nlet path\r\n\r\nlet springX = spring(\r\n  x,\r\n  {\r\n    stiffness: 0.06,\r\n    damping: 0.5,\r\n    precision: 1\r\n  }\r\n)\r\n\r\nlet springY = spring(\r\n  y,\r\n  {\r\n    stiffness: 0.1,\r\n    // damping: 0.333,\r\n    damping: 0.25,\r\n    precision: 0.1\r\n  }\r\n)\r\n\r\nlet valueSpring = spring(\r\n  0,\r\n  {\r\n    stiffness: 1,\r\n    damping: 0.1,\r\n    precision: 0.1\r\n  }\r\n)\r\n\r\nlet activeSpring = spring(\r\n  active ? 22 : 8,\r\n  {\r\n    stiffness: 0.1,\r\n    damping: 0.5,\r\n    precision: 0.1\r\n  }\r\n)\r\n\r\n$: springX.set(x)\r\n$: springY.set(y)\r\n$: progress.set(value)\r\n$: activeSpring.set(active ? 16 : 8)\r\n$: outer.set(active ? 48 : 32)\r\n\r\n// $: if (deleted) {\r\n//   sizeSpring.set(4)\r\n// }\r\n\r\n$: path = arcGenerator({\r\n  innerRadius: 24,\r\n  outerRadius: $outer,\r\n  startAngle: -Math.PI,\r\n  endAngle: 2 * Math.PI * ($progress / 127) - Math.PI\r\n})\r\n</script>\r\n\r\n<g fill={color} transform=\"translate({[$springX, $springY]})\" data-id={id}>\r\n  <circle r={$activeSpring}/>\r\n  <path d={path}/>\r\n</g>\r\n\r\n<style>\r\ng {\r\n  transition: fill 200ms linear;\r\n  will-change: transform, color;\r\n}\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AAiFQ,UAAU,AAAE,CAAC,AACnB,KAAK,CAAE,IAAI,CACX,gBAAgB,CAAE,IAAI,CACtB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,WAAW,eAAC,CAAC,AACX,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,IAAI,CACX,KAAK,CAAE,CAAC,CACR,GAAG,CAAE,CAAC,CACN,gBAAgB,CAAE,OAAO,CACzB,QAAQ,CAAE,MAAM,CAChB,OAAO,CAAE,IAAI,AACf,CAAC,AAED,MAAM,eAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,AACzB,CAAC,AAED,SAAS,eAAC,CAAC,AACT,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,CAAC,AACX,CAAC;ACrDD,CAAC,eAAC,CAAC,AACD,UAAU,CAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAC7B,WAAW,CAAE,SAAS,CAAC,CAAC,KAAK,AAC/B,CAAC;ACiCD,CAAC,eAAC,CAAC,AACD,UAAU,CAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAC7B,WAAW,CAAE,SAAS,CAAC,CAAC,KAAK,AAC/B,CAAC"
}